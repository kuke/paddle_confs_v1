#!usr/bin/env python
TrainData(ProtoData(files="train.list"))

################################### Algorithm Configuration ###################################
Settings(
    learning_rate_decay_a=0.01,
    learning_rate_decay_b=0.0,
    learning_rate=1e-3,
    batch_size=110,
    algorithm='sgd',
    num_batches_per_send_parameter=200,
    learning_method='adagrad',
    ada_epsilon=1e-6,
    ada_rou=0.95, )

################################### Network Configuration ###################################i
rn = 10
num_batches_regularization = rn,

Inputs("words", "label")
Outputs("cost")

Layer(type="data", name="words", size=22108)

Layer(
    inputs=[
        Input(
            "words",
            initial_std=0.01,
            decay_rate_l1=1e-3,
            parameter_name="hidden1.w")
    ],
    name="hidden1",
    bias=Bias(parameter_name="hidden1.bias"),
    active_type="sigmoid",
    type="fc",
    size=256, )

Layer(
    inputs=[Input("hidden1", initial_std=0.01, parameter_name="hidden2.w")],
    name="hidden2",
    bias=Bias(parameter_name="hidden2.bias"),
    active_type="tanh",
    type="fc",
    size=128)

Layer(
    inputs=[Input("hidden2", initial_std=0.01, parameter_name="out_vec.w")],
    name="out_vec",
    bias=Bias(parameter_name="out_vec.bias"),
    active_type="tanh",
    type="fc",
    size=32)

Layer(
    inputs=[
        Input("out_vec", initial_std=0.1, parameter_name="_softmax_out.w")
    ],
    bias=Bias(parameter_name="_softmax_out.bias"),
    type="fc",
    active_type="softmax",
    name="softmax_out",
    size=2)

Layer(type="data", name="label", size=1)

Layer(
    inputs=[Input("softmax_out"), Input("label")],
    name="cost",
    type=("multi-class-cross-entropy"
          if get_config_arg('with_cost', bool, True) else
          "classification_error"), )

Layer(
    inputs=[Input("softmax_out"), Input("label")],
    type="auc-validation",
    name="auc")

Evaluator(
    name="mis_classification",
    type="classification_error",
    inputs=["softmax_out", "label"])

Evaluator(
    name="spam_pre_rec",
    type="precision_recall",
    positive_label=1,
    inputs=["softmax_out", "label"])
